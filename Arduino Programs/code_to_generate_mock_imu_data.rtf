{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red157\green0\blue210;\red245\green245\blue245;\red0\green0\blue0;
\red19\green85\blue52;\red15\green112\blue1;\red31\green99\blue128;\red0\green0\blue255;\red101\green76\blue29;
\red144\green1\blue18;}
{\*\expandedcolortbl;;\cssrgb\c68627\c0\c85882;\cssrgb\c96863\c96863\c96863;\cssrgb\c0\c0\c0;
\cssrgb\c6667\c40000\c26667;\cssrgb\c0\c50196\c0;\cssrgb\c14510\c46275\c57647;\cssrgb\c0\c0\c100000;\cssrgb\c47451\c36863\c14902;
\cssrgb\c63922\c8235\c8235;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 import\cf0 \strokec4  numpy \cf2 \strokec2 as\cf0 \strokec4  np\cb1 \
\cf2 \cb3 \strokec2 import\cf0 \strokec4  pandas \cf2 \strokec2 as\cf0 \strokec4  pd\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf0 \cb3 fs = \cf5 \strokec5 100\cf0 \strokec4   \cf6 \strokec6 # Hz\cf0 \cb1 \strokec4 \
\cb3 duration = \cf5 \strokec5 2.0\cf0 \strokec4   \cf6 \strokec6 # seconds\cf0 \cb1 \strokec4 \
\cb3 t = np.linspace(\cf5 \strokec5 0\cf0 \strokec4 , duration, \cf7 \strokec7 int\cf0 \strokec4 (fs * duration), endpoint=\cf8 \strokec8 False\cf0 \strokec4 )\cb1 \
\
\cb3 ax = \cf5 \strokec5 0.02\cf0 \strokec4  * np.random.randn(\cf9 \strokec9 len\cf0 \strokec4 (t))\cb1 \
\cb3 ay = \cf5 \strokec5 0.02\cf0 \strokec4  * np.random.randn(\cf9 \strokec9 len\cf0 \strokec4 (t))\cb1 \
\cb3 az = \cf5 \strokec5 9.81\cf0 \strokec4  + \cf5 \strokec5 0.05\cf0 \strokec4  * np.random.randn(\cf9 \strokec9 len\cf0 \strokec4 (t))\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 for\cf0 \strokec4  press_start \cf8 \strokec8 in\cf0 \strokec4  [\cf5 \strokec5 0.4\cf0 \strokec4 , \cf5 \strokec5 1.2\cf0 \strokec4 ]:\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     idx_start = \cf7 \strokec7 int\cf0 \strokec4 (press_start * fs)\cb1 \
\cb3     idx_end = idx_start + \cf5 \strokec5 10\cf0 \cb1 \strokec4 \
\cb3     az[idx_start:idx_end] += np.linspace(\cf5 \strokec5 0\cf0 \strokec4 , \cf5 \strokec5 5\cf0 \strokec4 , \cf5 \strokec5 10\cf0 \strokec4 )\cb1 \
\cb3     az[idx_end:idx_end+\cf5 \strokec5 10\cf0 \strokec4 ] += np.linspace(\cf5 \strokec5 5\cf0 \strokec4 , \cf5 \strokec5 0\cf0 \strokec4 , \cf5 \strokec5 10\cf0 \strokec4 )\cb1 \
\
\cb3 gx = \cf5 \strokec5 0.1\cf0 \strokec4  * np.random.randn(\cf9 \strokec9 len\cf0 \strokec4 (t))\cb1 \
\cb3 gy = \cf5 \strokec5 0.1\cf0 \strokec4  * np.random.randn(\cf9 \strokec9 len\cf0 \strokec4 (t))\cb1 \
\cb3 gz = \cf5 \strokec5 0.1\cf0 \strokec4  * np.random.randn(\cf9 \strokec9 len\cf0 \strokec4 (t))\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 for\cf0 \strokec4  press_start \cf8 \strokec8 in\cf0 \strokec4  [\cf5 \strokec5 0.4\cf0 \strokec4 , \cf5 \strokec5 1.2\cf0 \strokec4 ]:\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     idx_start = \cf7 \strokec7 int\cf0 \strokec4 (press_start * fs)\cb1 \
\cb3     idx_end = idx_start + \cf5 \strokec5 20\cf0 \cb1 \strokec4 \
\cb3     gx[idx_start:idx_end] += np.linspace(\cf5 \strokec5 0\cf0 \strokec4 , \cf5 \strokec5 2\cf0 \strokec4 , \cf5 \strokec5 20\cf0 \strokec4 )\cb1 \
\cb3     gy[idx_start:idx_end] += np.linspace(\cf5 \strokec5 0\cf0 \strokec4 , \cf5 \strokec5 1\cf0 \strokec4 , \cf5 \strokec5 20\cf0 \strokec4 )\cb1 \
\cb3     gz[idx_start:idx_end] += np.linspace(\cf5 \strokec5 0\cf0 \strokec4 , \cf5 \strokec5 0.5\cf0 \strokec4 , \cf5 \strokec5 20\cf0 \strokec4 )\cb1 \
\
\cb3 imu_data = pd.DataFrame(\{\cb1 \
\cb3     \cf10 \strokec10 "time_ms"\cf0 \strokec4 : (t * \cf5 \strokec5 1000\cf0 \strokec4 ).astype(\cf7 \strokec7 int\cf0 \strokec4 ),\cb1 \
\cb3     \cf10 \strokec10 "ax"\cf0 \strokec4 : ax,\cb1 \
\cb3     \cf10 \strokec10 "ay"\cf0 \strokec4 : ay,\cb1 \
\cb3     \cf10 \strokec10 "az"\cf0 \strokec4 : az,\cb1 \
\cb3     \cf10 \strokec10 "gx"\cf0 \strokec4 : gx,\cb1 \
\cb3     \cf10 \strokec10 "gy"\cf0 \strokec4 : gy,\cb1 \
\cb3     \cf10 \strokec10 "gz"\cf0 \strokec4 : gz\cb1 \
\cb3 \})\cb1 \
\
\cb3 imu_data.to_csv(\cf10 \strokec10 "mock_imu_press_data.csv"\cf0 \strokec4 , index=\cf8 \strokec8 False\cf0 \strokec4 )\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 from\cf0 \strokec4  google.colab \cf2 \strokec2 import\cf0 \strokec4  files\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3 files.download(\cf10 \strokec10 "mock_imu_press_data.csv"\cf0 \strokec4 )\cb1 \
\
}